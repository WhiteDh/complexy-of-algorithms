package goit;

public class Fibonacci {



    /**–ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
                O(n), –æ—Å–∫—ñ–ª—å–∫–∏ –º–µ—Ç–æ–¥ –º—ñ—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è n‚àí1 —Ä–∞–∑—ñ–≤.
     –ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
                O(1), –æ—Å–∫—ñ–ª—å–∫–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –ª–∏—à–µ –∫—ñ–ª—å–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö.
     –ù–∞–π–∫—Ä–∞—â–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥—ñ–∞–≥—Ä–∞–º–∞ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ**/
    public int fibonacciIterative(int n) {
        if (n <= 1) return n;
        int a = 0, b = 1, result = 0;
        for (int i = 2; i <= n; i++) {
            result = a + b;
            a = b;
            b = result;
        }
        return result;
    }


    /**–ß–∞—Å–æ–≤–∞ —Ç–∞ –ø—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ:
     –ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
                O(2^n), –æ—Å–∫—ñ–ª—å–∫–∏ –º–µ—Ç–æ–¥ –≤–∏–∫–ª–∏–∫–∞—î —Å–µ–±–µ –¥–≤—ñ—á—ñ,
                —â–æ —Å—Ç–≤–æ—Ä—é—î –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–ª–∏–∫—ñ–≤.
     –ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
                O(n), –æ—Å–∫—ñ–ª—å–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—É
                –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —É —Å—Ç–µ–∫—É.
     –ù–∞–π–∫—Ä–∞—â–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥—ñ–∞–≥—Ä–∞–º–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ**/
    public int fibonacciRecursive(int n) {
        if (n <= 1) return n;
        return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
    }

    /**–ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
                    ùëÇ(ùëõ), –æ—Å–∫—ñ–ª—å–∫–∏ –º–µ—Ç–æ–¥ –æ–±—á–∏—Å–ª—é—î –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –æ–¥–∏–Ω —Ä–∞–∑.
      –ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: O(n), –æ—Å–∫—ñ–ª—å–∫–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
                    —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–∞—Å–∏–≤ dp —Ä–æ–∑–º—ñ—Ä–æ–º n+1.
     –ù–∞–π–∫—Ä–∞—â–µ –ø–¥—Ö–æ–¥–∏—Ç—å –¥—ñ–∞–≥—Ä–∞–º–∞ —Å—Ç–∞–Ω—ñ–≤**/
    public int fibonacciDP(int n) {
        if (n <= 1) return n;
        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }

}
